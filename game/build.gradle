apply plugin: 'application'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply from: "$rootDir/gradle/kotlin.gradle"

description = 'RSMod Game'
mainClassName = 'gg.rsmod.game.Launcher'

run {
    workingDir = rootProject.projectDir
}

dependencies {
    compile project(':util')
    compile project(':net')

    runtimeClasspath project(":game:plugins")

    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlinVersion
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-scripting-common', version: kotlinVersion
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-script-runtime', version: kotlinVersion
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.0'

    compile group: 'org.reflections', name: 'reflections', version: reflectionsVersion
    compile group: 'commons-io', name: 'commons-io', version: commonsIoVersion

    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4jVersion
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4jVersion
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: log4jVersion
    compile "io.github.microutils:kotlin-logging:$kotlinLoggingVersion"

    compile group: 'io.github.classgraph', name: 'classgraph', version: classGraphVersion
    compile group: 'it.unimi.dsi', name: 'fastutil', version: fastUtilVersion

    implementation group: 'com.lambdaworks', name: 'scrypt', version: scryptVersion
    implementation group: 'io.netty', name: 'netty-all', version: nettyVersion
    implementation group: 'com.google.guava', name: 'guava', version: guavaVersion
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: bouncycastleVersion
    implementation group: 'com.github.runelite.runelite', name: 'cache', version: runeliteVersion

    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    testImplementation group: 'junit', name: 'junit', version: junitVersion
}

sourceSets {
    main.kotlin.srcDirs = ['src/main/kotlin']
    main.resources.srcDirs = ['src/main/resources']
}

applicationDistribution.from("$rootDir/data/") {
    into 'bin/data/'

    include '**'

    exclude 'saves/*'
    exclude 'rsa/*'
}

applicationDistribution.from("$rootDir") {
    into 'bin'

    include 'plugins/*'

    include 'game.example.yml'
    rename 'game.example.yml', 'game.yml'
}

task extractDependencies(type: Copy) {
    from(zipTree("build/distributions/game-${project.version}.zip")) {
        include "game-${project.version}/lib/*"
        eachFile {
            path = name
        }
        includeEmptyDirs = false
    }
    into 'build/libs'
}

tasks.register("install") {
    description = 'Install RSMod'

    doLast {

        copy {
            into "${rootProject.projectDir}/"

            from "${rootProject.projectDir}/game.example.yml"
            rename 'game.example.yml', 'game.yml'

            from "${rootProject.projectDir}/first-launch-template"
            rename 'first-launch-template', 'first-launch'
        }

        javaexec {
            workingDir = rootProject.projectDir
            classpath = sourceSets.main.runtimeClasspath
            main = "gg.rsmod.game.service.rsa.RsaService"
            args = [ "16", "2048", "./data/rsa/key.pem" ] // radix, bitcount, rsa pem file
        }
    }
}

build.finalizedBy extractDependencies
install.dependsOn build